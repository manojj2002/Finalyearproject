// export const ScanResultsPage = () => {
//   const dispatch = useDispatch();
//   const { results: trivyResults } = useSelector((state: any) => state.trivy);
//   const { alerts: falcoAlerts } = useSelector((state: any) => state.falco);
//   useEffect(() => {
//     const fetchResults = async () => {
//       try {
//         const [trivyResults, falco] = await Promise.all([
//           fetchUserScanResults(),
//           fetchFalcoAlerts(),
//         ]);
//         setScanResults(trivyResults);
//         setFalcoResults(falco);
//         setShowResults(true); // üëà THIS is what was missing
//         toast.success("üìä Scan results loaded");
//       } catch (err) {
//         toast.error("‚ùå Failed to fetch scan results");
//       }
//     };
  
//     fetchResults();
//   }, []);
  
//   return (
//     <div>
    
//         <div className="mt-6 bg-white rounded shadow p-4">
//           <h2 className="text-lg font-semibold mb-2">üß™ Trivy Scan Results</h2>
//           {scanResults.length === 0 ? (
//             <p className="text-sm text-gray-500">No scan results found</p>
//           ) : (
//             <ul className="space-y-2">
//               {scanResults.map((r, i) => (
//                 <li key={i} className="border p-3 rounded bg-gray-100 shadow-sm text-sm">
//                   <div><strong>Image:</strong> {r.ImageName}</div>
//                   <div><strong>Scan Time:</strong> {new Date(r.ScanTime).toLocaleString()}</div>
//                   <div className="mt-2">
//                     <strong>Severity Count:</strong>
//                     <ul className="ml-4 list-disc">
//                       {r.SeverityCount ? (
//                         Object.entries(r.SeverityCount).map(([severity, count]: any) => (
//                           <li key={severity}>{severity}: {count}</li>
//                         ))
//                       ) : (
//                         <li>No severity data available</li>
//                       )}
//                     </ul>
//                   </div>
    
//                   <div className="mt-2">
//       <strong>Severity:</strong>
//       <TrivySeverityBar severityCount={r.SeverityCount || {}} />
//     </div>
    
//     <div className="flex space-x-4 mt-2 text-xs">
//     <span className="flex items-center"><span className="w-3 h-3 mr-1 bg-green-500 inline-block rounded-sm" /> Low</span>
//     <span className="flex items-center"><span className="w-3 h-3 mr-1 bg-yellow-400 inline-block rounded-sm" /> Medium</span>
//       <span className="flex items-center"><span className="w-3 h-3 mr-1 bg-orange-500 inline-block rounded-sm" /> High</span>
//       <span className="flex items-center"><span className="w-3 h-3 mr-1 bg-red-600 inline-block rounded-sm" /> Critical</span>
//     </div>
//                 </li>
//               ))}
//             </ul>
//           )}
//         </div>
    
//         <div className="mt-6 bg-white rounded shadow p-4">
//           <h2 className="text-lg font-semibold mb-2">üõ°Ô∏è Falco Security Alerts</h2>
//           {falcoResults.length === 0 ? (
//             <p className="text-sm text-gray-500">No Falco alerts found</p>
//           ) : (
//             <table className="w-full text-sm border">
//               <thead>
//                 <tr className="bg-gray-200 text-left">
//                   <th className="p-2">Rule</th>
//                   <th className="p-2">Priority</th>
//                   <th className="p-2">Container</th>
//                   <th className="p-2">Process</th>
//                   <th className="p-2">Count</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {falcoResults.map((alert, i) => (
//                   <tr key={i} className="border-t">
//                     <td className="p-2">{alert.rule}</td>
//                     <td className="p-2">{alert.priority}</td>
//                     <td className="p-2">{alert["container.name"]}</td>
//                     <td className="p-2">{alert["proc.name"]}</td>
//                     <td className="p-2">{alert.count}</td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//           )}
//         </div>

//     </div>
//   );
// };



  return (
    <div>
      <div className="mt-6 bg-white rounded shadow p-4">
        <h2 className="text-lg font-semibold mb-2">üß™ Trivy Scan Results</h2>
        {trivyResults.length === 0 ? (
          <p className="text-sm text-gray-500">No scan results found</p>
        ) : (
          <ul className="space-y-2">
            {trivyResults.map((r, i) => (
              <li key={i} className="border p-3 rounded bg-gray-100 shadow-sm text-sm">
                <div><strong>Image:</strong> {r.ImageName}</div>
                <div><strong>Scan Time:</strong> {new Date(r.ScanTime).toLocaleString()}</div>
                <div className="mt-2">
                  <strong>Severity Count:</strong>
                  <ul className="ml-4 list-disc">
                    {r.SeverityCount ? (
                      Object.entries(r.SeverityCount).map(([severity, count]: any) => (
                        <li key={severity}>{severity}: {count}</li>
                      ))
                    ) : (
                      <li>No severity data available</li>
                    )}
                  </ul>
                </div>

                <div className="mt-2">
                  <strong>Severity:</strong>
                  <TrivySeverityBar severityCount={r.SeverityCount || {}} />
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>

      <div className="mt-6 bg-white rounded shadow p-4">
        <h2 className="text-lg font-semibold mb-2">üõ°Ô∏è Falco Security Alerts</h2>
        {falcoAlerts.length === 0 ? (
          <p className="text-sm text-gray-500">No Falco alerts found</p>
        ) : (
          <table className="w-full text-sm border">
            <thead>
              <tr className="bg-gray-200 text-left">
                <th className="p-2">Rule</th>
                <th className="p-2">Priority</th>
                <th className="p-2">Container</th>
                <th className="p-2">Process</th>
                <th className="p-2">Count</th>
              </tr>
            </thead>
            <tbody>
              {falcoAlerts.map((alert, i) => (
                <tr key={i} className="border-t">
                  <td className="p-2">{alert.rule}</td>
                  <td className="p-2">{alert.priority}</td>
                  <td className="p-2">{alert["container.name"]}</td>
                  <td className="p-2">{alert["proc.name"]}</td>
                  <td className="p-2">{alert.count}</td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
